{"version":3,"file":"functions.js","mappings":"inEAGA,SAASA,EAAkBC,EAAMC,EAAoBC,GACnD,IAAIC,EAAS,GAEbC,QAAQC,IAAIL,GACZI,QAAQC,IAAIL,EAAKM,QAGjB,IAFA,IAAIC,GAAc,EACdC,EAAc,GACTC,EAAM,EAAGA,EAAMT,EAAKM,OAAQG,IAAO,CAC1C,IAD0C,EACtCC,EAAa,GADyB,IAExBT,GAFwB,IAE1C,2BAAsC,KAA3BU,EAA2B,QACpC,GAAIC,MAAMC,QAAQb,EAAKS,GAAKE,IAC1BD,EAAWI,KAAKd,EAAKS,GAAKE,GAAKI,iBAC1B,GAA8B,WAA1B,EAAOf,EAAKS,GAAKE,KAAwC,OAAnBX,EAAKS,GAAKE,GAAe,CACxEP,QAAQC,IAAIL,EAAKS,GAAKE,IACtB,cAA2BK,OAAOC,QAAQjB,EAAKS,GAAKE,IAApD,eAA2D,CAAtD,gBAAOO,EAAP,KAAYC,EAAZ,KACCZ,GACFC,EAAYM,KAAKI,GAEnBR,EAAWI,KAAKK,SAGlBT,EAAWI,KAAKd,EAAKS,GAAKE,KAdY,8BAiB1CJ,GAAc,EACdJ,EAAOW,KAAKJ,GAYd,OAVIR,IACGK,IACHH,QAAQC,IAAIG,GAEZP,GADAA,EAAqBA,EAAmBmB,OAAOZ,IACPa,QAAO,SAACC,GAAD,MAAmB,YAATA,MAE3DlB,QAAQC,IAAIJ,GACZE,EAAOoB,QAAQtB,IAEjBG,QAAQC,IAAIF,GACLA,EAGT,SAASqB,EAAaxB,EAAMyB,GAC1B,IACEC,EACAC,EAFExB,EAAS,GAIb,IAAKuB,EAAI,EAAGC,GAAK,EAAGD,EAAI1B,EAAKM,OAAQoB,IAC/BA,EAAID,GAAwB,IAE9BtB,IADAwB,GACY,IAGdxB,EAAOwB,GAAGb,KAAKd,EAAK0B,IACpBtB,QAAQC,IAAIF,GAGd,OAAOA,EAqBT,SAASyB,EAAYC,EAAKC,GACxB,OAAOC,SAASF,IAAQA,EAAME,SAASF,GAAOC,EAGhD,SAASE,EAAcH,EAAKC,GAC1B,OAAOG,WAAWJ,IAAQA,EAAMI,WAAWJ,GAAOC,E,iDAapD,WAAuBI,EAAUC,EAAYC,EAAUC,EAAOC,GAA9D,uGACgB,OAAVD,IACFA,EAAQ,GAGE,OAARC,IACFA,EAAM,WAGRlC,QAAQC,IAAI+B,GACRG,EAAiBH,EAASI,OAS9BpC,QAAQC,IAAIkC,IACRE,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE1BM,EAASC,KAAKC,UAAUP,GAE1BQ,EAAiB,CACnBC,OAAQ,MACRC,QAASR,EACTS,KAAMN,GAGJO,EAAc,GAjCpB,UAmCQC,MAAM,4CAA8CjB,EAAa,UAAYE,EAAOU,GACvFM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZA,EAAQ,WAAeE,SAAQ,SAACC,GAC9BA,EAAK,QAAYD,SAAQ,SAACE,GACxBtD,QAAQC,IAAIqD,EAAI,IAChBP,EAAYrC,KAAK4C,EAAI,aAI1BC,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAhD3C,eAkDExD,QAAQC,IAAI8C,GACRU,EAASrC,EAAa2B,EAAad,GACvCjC,QAAQC,IAAIwD,GApDd,kBAsDSA,GAtDT,6C,uEAmEA,WAA2B3B,EAAUC,EAAY2B,EAAYzB,EAAOC,GAApE,wGAiBE,IAhBc,OAAVD,IACFA,EAAQ,GAGE,OAARC,IACFA,EAAM,WAGRlC,QAAQC,IAAIyD,IACRrB,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE5ByB,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQS,EAAYkC,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAC9DqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GA1BtB,OA6BE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,MACRC,QAASR,EACTS,KAAMN,GAGJO,EAAc,GAxCpB,UA0CQC,MAAM,8CAAgDjB,EAAa,UAAYE,EAAOU,GACzFM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZA,EAAQ,WAAeE,SAAQ,SAACC,GAC9BA,EAAK,QAAYD,SAAQ,SAACE,GACxBtD,QAAQC,IAAIqD,EAAI,IAChBP,EAAYrC,KAAK4C,EAAI,aAI1BC,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAvD3C,eAyDExD,QAAQC,IAAI8C,GACRU,EAASrC,EAAa2B,EAAad,GACvCjC,QAAQC,IAAIwD,GA3Dd,kBA6DSA,GA7DT,6C,uEA0EA,WAAyB3B,EAAUC,EAAYC,EAAUC,EAAOC,GAAhE,uGACgB,OAAVD,IACFA,EAAQ,GAGE,OAARC,IACFA,EAAM,WAGRlC,QAAQC,IAAI+B,GACRG,EAAiBH,EAASI,OAS9BpC,QAAQC,IAAIkC,IACRE,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE1BM,EAASC,KAAKC,UAAUP,GAE1BQ,EAAiB,CACnBC,OAAQ,MACRC,QAASR,EACTS,KAAMN,GAGJO,EAAc,GAjCpB,UAmCQC,MAAM,mDAAqDjB,EAAa,UAAYE,EAAOU,GAC9FM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZA,EAAQ,eAAmBE,SAAQ,SAACC,GAClCA,EAAK,QAAYD,SAAQ,SAACE,GACxBtD,QAAQC,IAAIqD,EAAI,IAChBP,EAAYrC,KAAK4C,EAAI,aAI1BC,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAhD3C,eAkDExD,QAAQC,IAAI8C,GACRU,EAASrC,EAAa2B,EAAad,GACvCjC,QAAQC,IAAIwD,GApDd,kBAsDSA,GAtDT,6C,uEAqEA,WAAuB3B,EAAUC,EAAY2B,EAAYG,EAAe/D,EAAiBgE,EAAqB5B,GAA9G,kHAyBE,IAxBsB,OAAlB2B,IACFA,GAAgB,GAGM,OAApB/D,IACFA,GAAkB,GAGQ,OAAxBgE,IACFA,GAAsB,GAGZ,OAAR5B,IACFA,EAAM,WAGRlC,QAAQC,IAAIyD,IACRrB,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAIvBZ,EAAI,EAAGA,EAAIoC,EAAW,GAAGxD,OAAQoB,IACpCoC,EAAWpC,GAOjB,IAFIqC,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQS,EAAYkC,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAC9DqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GA1CtB,OA6CE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,MACRC,QAASR,EACTS,KAAMN,GArDV,UAyDwBQ,MACpB,yCAA2CjB,EAAa,kBAAoB8B,EAAclD,WAC1FgC,GAECM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBI,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAhE3C,QAqEE,IAZAO,cAzDF,OAkEMC,EAAkB,GAGtB,MAA2BpD,OAAOC,QAAQkD,cAAc,IAAxD,eAA6D,YAAjDjD,EAAiD,WACvDgD,GAGS,MAAPhD,IAFJkD,EAAgBtD,KAAKI,GAvE3B,OAgFM2C,EAAS9D,EAAkBoE,cAAeC,EAAiBlE,GAhFjE,kBAiFS2D,GAjFT,6C,uEA4FA,WAAsB3B,EAAUC,EAAYG,GAA5C,mGACc,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE5BS,EAAiB,CACnBC,OAAQ,MACRC,QAASR,GAGP4B,EAAS,GAdf,SAgBQjB,MAAM,wCAA0CjB,EAAYY,GAC/DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACQtC,OAAOsD,KAAKhB,GACpBE,SAAQ,SAACtC,EAAKqD,GACjBF,EAAOvD,KAAK,CAACI,EAAKoC,EAASpC,WAG9ByC,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA1B3C,cA4BExD,QAAQC,IAAIgE,GACRG,EAAWH,EAAO,GAAGI,KAAI,SAACC,EAAGC,GAAJ,OAAiBN,EAAOI,KAAI,SAAChE,GAAD,OAASA,EAAIkE,SA7BxE,kBA+BSH,GA/BT,6C,uEA0CA,WAAmBtC,EAAUC,EAAYG,GAAzC,mGACc,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE5BS,EAAiB,CACnBC,OAAQ,MACRC,QAASR,GAGPmC,EAAM,GAdZ,SAgBQxB,MAAM,oCAAsCjB,EAAa,iBAAkBY,GAC9EM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZsB,EAAI9D,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAxB3C,cAyBMiB,EAAQD,EAAI,GAAGH,KAAI,SAACC,EAAGC,GAAJ,OAAiBC,EAAIH,KAAI,SAAChE,GAAD,OAASA,EAAIkE,SAzB/D,kBA0BSE,GA1BT,6C,uEAoCA,WAAoB3C,EAAUI,GAA9B,+GACc,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE5BS,EAAiB,CACnBC,OAAQ,MACRC,QAASR,GAGPqC,EAAO,GAdb,SAgBQ1B,MAAM,iEAAkEL,GAC3EM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZwB,EAAKhE,KAAKwC,MAEXK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAxB3C,OA4BE,IAHImB,EAAYD,EAAK,GAAG,GACxB1E,QAAQC,IAAI0E,GACRX,EAAkB,GACtB,MAA2BpD,OAAOC,QAAQ8D,GAA1C,eAAsD,YAA1C7D,EAA0C,UACpDkD,EAAgBtD,KAAKI,GA7BzB,OA+BEd,QAAQC,IAAI+D,GACRP,EAAS9D,EAAkB+E,EAAK,GAAIV,GAAiB,GAEzDhE,QAAQC,IAAIwD,GAlCd,kBAmCSA,GAnCT,6C,uEA8CA,WAAsB3B,EAAUC,EAAYG,GAA5C,2GACc,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAC5BS,EAAiB,CACnBC,OAAQ,MACRC,QAASR,GAGPuC,EAAS,GAbf,SAeQ5B,MAAM,uCAAwCL,GACjDM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ0B,EAAOlE,KAAKwC,MAEbK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAvB3C,cAyBMC,EAAS,GAEbzD,QAAQC,IAAI2E,GACZA,EAASA,EAAO,GAAG7C,GACnB/B,QAAQC,IAAI2E,IAERC,EAAc,IAENnE,KAAKkE,EAAM,MACvBnB,EAAO/C,KAAKmE,GAEQ,GAENnE,KAAKkE,EAAM,QACzBnB,EAASmB,EAAM,QAEXE,EAAqB,IAENpE,KAAKkE,EAAM,aAC9BnB,EAAO/C,KAAKoE,IAERC,EAAsB,IAENrE,KAAKkE,EAAM,aAC/BnB,EAAO/C,KAAKqE,IAERC,EAAqB,IAENtE,KAAKkE,EAAM,YAC9BnB,EAAO/C,KAAKsE,GAEZhF,QAAQC,IAAIwD,GAxDd,kBA0DSA,GA1DT,6C,uEAsEA,WAAwB3B,EAAUC,EAAY2B,EAAYxB,GAA1D,0GAWE,IAVY,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAE5ByB,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQa,EAAc8B,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAChEqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GApBtB,OAuBE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,OACRC,QAASR,EACTS,KAAMN,GAGJyC,EAAM,GAlCZ,UAoCQjC,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA5C3C,eA8CM0B,EAAe,IAEP,QAAc,iBAC1BA,EAAY,YAAkB,CAC5BC,WAAY,IACZC,kBAAmB,GACnBC,cAAe,EACfC,kBAAmB,KAGjBC,EAAoB9C,KAAKC,UAAUwC,GAEvCvC,EAAc,KAAW4C,EA1D3B,UA6DQvC,MAAM,uCAAyCjB,EAAYY,GAC9DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MArE3C,iCAuESyB,GAvET,6C,uEAuFA,WACEnD,EACAC,EACA2B,EACA8B,EACAC,EACAC,EACAC,EACAzD,GARF,4GAsCE,IA5BY,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAEb,OAAfwD,IACFA,GAAa,GAGXE,EAAa,SAEbF,IACFE,EAAa,cAGG,OAAdD,IACFA,EAAY,IAGI,OAAdF,IACFA,GAAY,GAGV9B,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQa,EAAc8B,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAChEqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GA/CtB,OAkDE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,SACRC,QAASR,GAGP4C,EAAM,GA5DZ,UA+DQjC,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAvE3C,eAyEEb,EAAiB,CACfC,OAAQ,OACRC,QAASR,EACTS,KAAMN,GA5EV,UAgFQQ,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAxF3C,eA0FM0B,EAAe,IAEP,QAAc,aAC1BA,EAAY,MAAY,CACtBW,KAAM,wBACNC,WAAYN,GAEdN,EAAY,MAAY,CACtBa,KAAMH,EACNI,aAAcR,EACdG,UAAWA,GAEbT,EAAa,gBAAkB,CAC7Be,cAAe,IAEjBf,EAAY,YAAkB,CAC5BC,WAAY,IACZC,kBAAmB,GACnBC,cAAe,MAGbE,EAAoB9C,KAAKC,UAAUwC,GAEvCvC,EAAc,KAAW4C,EAjH3B,UAoHQvC,MACJ,uCAAyCjB,EAAa,cAAgB0D,EAAU9E,WAChFgC,GAECM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA/H3C,iCAiIS,YAjIT,6C,uEAgJA,WAA6B1B,EAAUC,EAAY2B,EAAY8B,EAAmBC,EAAWE,EAAWzD,GAAxG,0GAmBE,IAlBY,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAEd,OAAdyD,IACFA,EAAY,IAGI,OAAdF,IACFA,GAAY,GAGV9B,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQa,EAAc8B,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAChEqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GA5BtB,OA+BE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,SACRC,QAASR,GAGP4C,EAAM,GAzCZ,UA4CQjC,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MApD3C,eAsDEb,EAAiB,CACfC,OAAQ,OACRC,QAASR,EACTS,KAAMN,GAzDV,UA6DQQ,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MArE3C,eAuEM0B,EAAe,IAEP,QAAc,aAC1BA,EAAY,MAAY,CACtBW,KAAM,aACNC,WAAYN,GAEdN,EAAY,MAAY,CACtBS,UAAWA,GAEbT,EAAa,gBAAkB,CAC7Be,cAAe,IAEjBf,EAAY,YAAkB,CAC5BC,WAAY,IACZE,cAAe,KACfa,cAAe,QACfC,aAAc,GAGZZ,EAAoB9C,KAAKC,UAAUwC,GAEvCvC,EAAc,KAAW4C,EA7F3B,UAgGQvC,MACJ,uCAAyCjB,EAAa,cAAgB0D,EAAU9E,WAChFgC,GAECM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA3G3C,iCA6GS,YA7GT,6C,uEA6HA,WACE1B,EACAC,EACA2B,EACA8B,EACAY,EACAX,EACAE,EACAzD,GARF,0GA4BE,IAlBY,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAEd,OAAdyD,IACFA,EAAY,IAGI,OAAdF,IACFA,GAAY,GAGV9B,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQa,EAAc8B,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAChEqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GArCtB,OAwCE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,GAE5B3D,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,SACRC,QAASR,GAGP4C,EAAM,GAlDZ,UAqDQjC,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA7D3C,eA+DEb,EAAiB,CACfC,OAAQ,OACRC,QAASR,EACTS,KAAMN,GAlEV,UAsEQQ,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA9E3C,eAgFM0B,EAAe,IAEP,QAAc,aAC1BA,EAAY,MAAY,CACtBW,KAAM,aACNC,WAAYN,EACZa,kBAAmB,kBAErBnB,EAAY,MAAY,CACtBS,UAAWA,EACXI,KAAM,aACNC,aAAcI,GAEhBlB,EAAa,gBAAkB,CAC7Be,cAAe,IAEjBf,EAAY,YAAkB,CAC5BC,WAAY,IACZE,cAAe,KACfa,cAAe,QACfC,aAAc,GAGZZ,EAAoB9C,KAAKC,UAAUwC,GAEvCvC,EAAc,KAAW4C,EAzG3B,UA4GQvC,MACJ,uCAAyCjB,EAAa,cAAgB0D,EAAU9E,WAChFgC,GAECM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MAvH3C,iCAyHS,YAzHT,6C,uEAuIA,WAAuB1B,EAAUC,EAAY2B,EAAY4C,EAAWb,EAAWvD,GAA/E,4GAmBE,IAlBY,OAARA,IACFA,EAAM,YAEJG,EAAY,IAAIC,SACVC,OAAO,OAAQT,GACzBO,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,cAAeL,GAEd,OAAdoE,IACFA,EAAY,2CAGI,OAAdb,IACFA,GAAY,GAGV9B,EAAa,GAERtD,EAAM,EAAGA,EAAMqD,EAAWxD,OAAQG,IACzC,GAAIA,EAAM,EAAG,CAGX,IADIuD,EAAM,GACDrD,EAAM,EAAGA,EAAMmD,EAAW,GAAGxD,OAAQK,IAC5CP,QAAQC,IAAIyD,EAAWrD,GAAKE,IACxBQ,EAAQa,EAAc8B,EAAWrD,GAAKE,GAAMmD,EAAWrD,GAAKE,IAChEqD,EAAIF,EAAW,GAAGnD,IAAQQ,EAE5B4C,EAAWjD,KAAKkD,GA5BtB,OA+BE5D,QAAQC,IAAI0D,GACRnB,EAASC,KAAKC,UAAUiB,IACxB4C,EAAc,IAEP,WAAiB,eAC5BA,EAAW,SAAe,MAC1BA,EAAW,WAAiBxE,EAC5BwE,EAAW,UAAgB/D,EAE3BxC,QAAQC,IAAIuC,GAERG,EAAiB,CACnBC,OAAQ,SACRC,QAASR,GAGP4C,EAAM,GA/CZ,UAkDQjC,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA1D3C,eA4DEb,EAAiB,CACfC,OAAQ,OACRC,QAASR,EACTS,KAAMN,GA/DV,UAmEQQ,MAAM,sCAAwCjB,EAAYY,GAC7DM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MA3E3C,eA6EM0B,EAAe,IAEP,QAAc,OAE1BA,EAAY,YAAkB,CAC5BoB,UAAWA,GAGTf,EAAoB9C,KAAKC,UAAUwC,GAEvCvC,EAAc,KAAW4C,EAvF3B,UA0FQvC,MACJ,uCAAyCjB,EAAa,cAAgB0D,EAAU9E,WAChFgC,GAECM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GACLlD,QAAQC,IAAIiD,GACZ+B,EAAIvE,KAAKwC,MAEVK,OAAM,SAACC,GAAD,OAAWxD,QAAQC,IAAI,QAASuD,MArG3C,iCAuGS,YAvGT,6C,sBA0GAgD,gBAAgBC,UAAU,W,SArkCH,EAARC,EAAAA,EAAAA,EAAAA,G,kCAskCfF,gBAAgBC,UAAU,e,SAngCC,EAAZE,EAAAA,EAAAA,EAAAA,G,kCAogCfH,gBAAgBC,UAAU,a,SA17BD,EAAVG,EAAAA,EAAAA,EAAAA,G,kCA27BfJ,gBAAgBC,UAAU,W,SAt3BH,EAARI,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,G,kCAu3BfL,gBAAgBC,UAAU,U,SA3xBJ,EAAPxC,EAAAA,G,kCA4xBfuC,gBAAgBC,UAAU,O,SAlvBP,EAAJjC,EAAAA,G,kCAmvBfgC,gBAAgBC,UAAU,Q,SA/sBN,EAAL/B,G,kCAgtBf8B,gBAAgBC,UAAU,U,SAlqBJ,EAAP7B,EAAAA,G,kCAmqBf4B,gBAAgBC,UAAU,Y,SA7lBF,EAATK,EAAAA,EAAAA,G,kCA8lBfN,gBAAgBC,UAAU,qB,SAvgBO,EAAlBM,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,G,kCAwgBfP,gBAAgBC,UAAU,iB,SAxXG,EAAdO,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,G,kCAyXfR,gBAAgBC,UAAU,e,SA5PC,EAAZQ,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,G,kCA6PfT,gBAAgBC,UAAU,W,SAtHH,EAARS,EAAAA,EAAAA,EAAAA,EAAAA,G","sources":["webpack:///./src/functions/functions.js?"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* global console setInterval, clearInterval */\n\nfunction listObjToMultiDim(list, elementsToRetrieve, include_headers) {\n  var matrix = [];\n\n  console.log(list);\n  console.log(list.length);\n  let firstUnroll = true;\n  var new_headers = [];\n  for (let row = 0; row < list.length; row++) {\n    var row_values = [];\n    for (const col of elementsToRetrieve) {\n      if (Array.isArray(list[row][col])) {\n        row_values.push(list[row][col].toString());\n      } else if (typeof list[row][col] === \"object\" && list[row][col] !== null) {\n        console.log(list[row][col]);\n        for (const [key, value] of Object.entries(list[row][col])) {\n          if (firstUnroll) {\n            new_headers.push(key);\n          }\n          row_values.push(value);\n        }\n      } else {\n        row_values.push(list[row][col]);\n      }\n    }\n    firstUnroll = false;\n    matrix.push(row_values);\n  }\n  if (include_headers) {\n    if (!firstUnroll) {\n      console.log(new_headers);\n      elementsToRetrieve = elementsToRetrieve.concat(new_headers);\n      elementsToRetrieve = elementsToRetrieve.filter((item) => item !== \"predict\");\n    }\n    console.log(elementsToRetrieve);\n    matrix.unshift(elementsToRetrieve);\n  }\n  console.log(matrix);\n  return matrix;\n}\n\nfunction listToMatrix(list, elementsPerSubArray) {\n  var matrix = [],\n    i,\n    k;\n\n  for (i = 0, k = -1; i < list.length; i++) {\n    if (i % elementsPerSubArray === 0) {\n      k++;\n      matrix[k] = [];\n    }\n\n    matrix[k].push(list[i]);\n    console.log(matrix);\n  }\n\n  return matrix;\n}\n\nfunction arr2obj(arr) {\n  // Create an empty object\n  let obj = {};\n\n  arr.forEach((v) => {\n    // Extract the key and the value\n    let key = v[0];\n    let value = v[1];\n\n    // Add the key and value to\n    // the object\n    obj[key] = value;\n  });\n\n  // Return the object\n  return obj;\n}\n\nfunction tryParseInt(str, defaultValue) {\n  return parseInt(str) == str ? parseInt(str) : defaultValue;\n}\n\nfunction tryParseFloat(str, defaultValue) {\n  return parseFloat(str) == str ? parseFloat(str) : defaultValue;\n}\n\n/**\n * J Similar IDs - Search for similar data by ids\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to Search\n * @param {number[][]} id_input Ids to search\n * @param {number} [top_k] Number of similars to retrieve - default=5\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {number[][]} Similar Ids.\n */\nasync function similar(auth_key, collection, id_input, top_k, env) {\n  if (top_k === null) {\n    top_k = 5;\n  }\n\n  if (env === null) {\n    env = \"default\";\n  }\n\n  console.log(id_input);\n  let id_input_query = id_input.flat();\n\n  // if (!Array.isArray(id_input)) {\n  //   console.log(id_input);\n  //   let ids_to_query = [ids_to_query];\n  // } else {\n  //   let ids_to_query = ids_to_query;\n  // }\n\n  console.log(id_input_query);\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  const myJSON = JSON.stringify(id_input_query);\n\n  var requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  var id_similars = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/similar/id/\" + collection + \"?top_k=\" + top_k, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      response[\"similarity\"].forEach((query) => {\n        query[\"results\"].forEach((qres) => {\n          console.log(qres[\"id\"]);\n          id_similars.push(qres[\"id\"]);\n        });\n      });\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  console.log(id_similars);\n  var result = listToMatrix(id_similars, top_k);\n  console.log(result);\n\n  return result;\n}\n\n/**\n * J Similar Data - Search for similar data with new data as input\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to perform Search\n * @param {string[][]} input_data Model inputs\n * @param {number} [top_k] Number of similars to retrieve - default=\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {number[][]} Similar Ids.\n */\nasync function similardata(auth_key, collection, input_data, top_k, env) {\n  if (top_k === null) {\n    top_k = 5;\n  }\n\n  if (env === null) {\n    env = \"default\";\n  }\n\n  console.log(input_data);\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseInt(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  var id_similars = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/similar/data/\" + collection + \"?top_k=\" + top_k, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      response[\"similarity\"].forEach((query) => {\n        query[\"results\"].forEach((qres) => {\n          console.log(qres[\"id\"]);\n          id_similars.push(qres[\"id\"]);\n        });\n      });\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  console.log(id_similars);\n  var result = listToMatrix(id_similars, top_k);\n  console.log(result);\n\n  return result;\n}\n\n/**\n * J Recommendation IDs - Recommendation by Ids\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Base Collection to Recommend (e.g. Products, in a Products to Users Recommendation)\n * @param {number[][]} id_input Ids to recommend to (e.g. User ID, in a Products to Users Recommendation)\n * @param {number} [top_k] Number of recommendations to retrieve - default=5\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {number[][]} Recommendations Ids.\n */\nasync function recommend(auth_key, collection, id_input, top_k, env) {\n  if (top_k === null) {\n    top_k = 5;\n  }\n\n  if (env === null) {\n    env = \"default\";\n  }\n\n  console.log(id_input);\n  let id_input_query = id_input.flat();\n\n  // if (!Array.isArray(id_input)) {\n  //   console.log(id_input);\n  //   let ids_to_query = [ids_to_query];\n  // } else {\n  //   let ids_to_query = ids_to_query;\n  // }\n\n  console.log(id_input_query);\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  const myJSON = JSON.stringify(id_input_query);\n\n  var requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  var id_similars = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/recommendation/id/\" + collection + \"?top_k=\" + top_k, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      response[\"recommendation\"].forEach((query) => {\n        query[\"results\"].forEach((qres) => {\n          console.log(qres[\"id\"]);\n          id_similars.push(qres[\"id\"]);\n        });\n      });\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  console.log(id_similars);\n  var result = listToMatrix(id_similars, top_k);\n  console.log(result);\n\n  return result;\n}\n\n/**\n * J Predict - Perform inference on collection with db_type Supervised\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to perform Inference\n * @param {string[][]} input_data Model inputs\n * @param {boolean} [predict_proba] Whether to return probabilities or just the most probable class (for classification models only). Default: False\n * @param {boolean} [include_headers] Whether to return column names or just the values. Default: False\n * @param {boolean} [include_response_id] Whether to return the response column id Default: False\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string[][]} Model Inference\n */\nasync function predict(auth_key, collection, input_data, predict_proba, include_headers, include_response_id, env) {\n  if (predict_proba === null) {\n    predict_proba = false;\n  }\n\n  if (include_headers === null) {\n    include_headers = false;\n  }\n\n  if (include_response_id === null) {\n    include_response_id = false;\n  }\n\n  if (env === null) {\n    env = \"default\";\n  }\n\n  console.log(input_data);\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  // check if there is an id column\n  let hasid = false;\n  for (let i = 0; i < input_data[0].length; i++) {\n    if (input_data[i] == \"id\") {\n      hasid = true;\n    }\n  }\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseInt(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  // eslint-disable-next-line no-undef\n  pred_response = await fetch(\n    \"https://mycelia.azure-api.net/predict/\" + collection + \"?predict_proba=\" + predict_proba.toString(),\n    requestOptions\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var results_columns = [];\n\n  // eslint-disable-next-line no-undef\n  for (const [key, value] of Object.entries(pred_response[0])) {\n    if (include_response_id) {\n      results_columns.push(key);\n    } else {\n      if (key != \"id\") {\n        results_columns.push(key);\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  var result = listObjToMultiDim(pred_response, results_columns, include_headers);\n  return result;\n}\n\n/**\n * J Fields - Retrieve collection fields\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to query fields\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string[][]} Fields used on collection and their types\n */\nasync function fields(auth_key, collection, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  var requestOptions = {\n    method: \"GET\",\n    headers: myHeaders,\n  };\n\n  var fields = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/fields/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      const keys = Object.keys(response);\n      keys.forEach((key, index) => {\n        fields.push([key, response[key]]);\n      });\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  console.log(fields);\n  let fields_t = fields[0].map((_, colIndex) => fields.map((row) => row[colIndex]));\n  // var result = listToMatrix(preds, 1);\n  return fields_t;\n}\n\n/**\n * J Ids - Retrieve collection IDs\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to query ids\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {number[][]} Complete list of Ids present in the collection\n */\nasync function ids(auth_key, collection, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  var requestOptions = {\n    method: \"GET\",\n    headers: myHeaders,\n  };\n\n  var ids = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/id/\" + collection + \"?mode=complete\", requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ids.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n  let ids_t = ids[0].map((_, colIndex) => ids.map((row) => row[colIndex]));\n  return ids_t;\n}\n\n/**\n * J Info\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string[][]} Returns the complete list of collections on the subscription\n */\nasync function info(auth_key, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  var requestOptions = {\n    method: \"GET\",\n    headers: myHeaders,\n  };\n\n  var info = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/info?mode=complete&get_size=true\", requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      info.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n  let result_ex = info[0][0];\n  console.log(result_ex);\n  var results_columns = [];\n  for (const [key, value] of Object.entries(result_ex)) {\n    results_columns.push(key);\n  }\n  console.log(results_columns);\n  var result = listObjToMultiDim(info[0], results_columns, true);\n\n  console.log(result);\n  return result;\n}\n\n/**\n * J Status\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection Collection to check status\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string[][]} Returns the status\n */\nasync function status(auth_key, collection, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n  var requestOptions = {\n    method: \"GET\",\n    headers: myHeaders,\n  };\n\n  var status = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/status\", requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      status.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  let result = [];\n\n  console.log(status);\n  status = status[0][collection];\n  console.log(status);\n\n  let result_task = [];\n\n  result_task.push(status[\"Task\"]);\n  result.push(result_task);\n\n  let result_status = [];\n\n  result_status.push(status[\"Status\"]);\n  result = status[\"Status\"];\n\n  let result_description = [];\n\n  result_description.push(status[\"Description\"]);\n  result.push(result_description);\n\n  let result_current_step = [];\n\n  result_current_step.push(status[\"CurrentStep\"]);\n  result.push(result_current_step);\n\n  let result_total_steps = [];\n\n  result_total_steps.push(status[\"TotalSteps\"]);\n  result.push(result_total_steps);\n\n  console.log(result);\n\n  return result;\n}\n\n/**\n * J Table Setup - Self Supervised\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection JAI Collection Name\n * @param {string[][]} input_data Table data\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string[][]} Returns the status of the model training\n */\nasync function fittable(auth_key, collection, input_data, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseFloat(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  var ans = [];\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var setup_params = {};\n\n  setup_params[\"db_type\"] = \"SelfSupervised\";\n  setup_params[\"hyperparams\"] = {\n    min_epochs: 500,\n    pretraining_ratio: 0.5,\n    learning_rate: 0,\n    hidden_latent_dim: 128,\n  };\n\n  let setup_params_JSON = JSON.stringify(setup_params);\n\n  requestOptions[\"body\"] = setup_params_JSON;\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/setup/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  return ans;\n}\n\n/**\n * J Table Setup - Supervised Classification\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection JAI Collection Name\n * @param {string[][]} input_data Table data - including the label\n * @param {string} label_column_name Label (y) column name\n * @param {boolean} [overwrite] Whether to overwrite if a collection with the same name already exists. Default: False\n * @param {boolean} [stratified] Whether to perform stratified train/test split or not - Default: True\n * @param {number} [test_size] % of the data to use for validation and evaluation (test) - Ex: test_size=0.2 means 60% of data for training, 20% for validation, 20% for evaluation - Default: 0.1\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string} Returns the status of the model training\n */\nasync function fitclassification(\n  auth_key,\n  collection,\n  input_data,\n  label_column_name,\n  overwrite,\n  stratified,\n  test_size,\n  env\n) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  if (stratified === null) {\n    stratified = true;\n  }\n\n  let split_type = \"random\";\n\n  if (stratified) {\n    split_type = \"stratified\";\n  }\n\n  if (test_size === null) {\n    test_size = 0.1;\n  }\n\n  if (overwrite === null) {\n    overwrite = false;\n  }\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseFloat(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"DELETE\",\n    headers: myHeaders,\n  };\n\n  var ans = [];\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var setup_params = {};\n\n  setup_params[\"db_type\"] = \"Supervised\";\n  setup_params[\"label\"] = {\n    task: \"metric_classification\",\n    label_name: label_column_name,\n  };\n  setup_params[\"split\"] = {\n    type: split_type,\n    split_column: label_column_name,\n    test_size: test_size,\n  };\n  setup_params[\"cat_process \"] = {\n    embedding_dim: 64,\n  };\n  setup_params[\"hyperparams\"] = {\n    min_epochs: 500,\n    pretraining_ratio: 0.1,\n    learning_rate: 0.0003,\n  };\n\n  let setup_params_JSON = JSON.stringify(setup_params);\n\n  requestOptions[\"body\"] = setup_params_JSON;\n\n  // eslint-disable-next-line no-undef\n  await fetch(\n    \"https://mycelia.azure-api.net/setup/\" + collection + \"?overwrite=\" + overwrite.toString(),\n    requestOptions\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  return \"SETUP OK\";\n}\n\n/**\n * J Table Setup - Supervised Regression\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection JAI Collection Name\n * @param {string[][]} input_data Table data - including the label\n * @param {string} label_column_name Label (y) column name\n * @param {boolean} [overwrite] Whether to overwrite if a collection with the same name already exists. Default: False\n * @param {number} [test_size] % of the data to use for validation and evaluation (test) - Ex: test_size=0.2 means 60% of data for training, 20% for validation, 20% for evaluation - Default: 0.1\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string} Returns the status of the model training\n */\nasync function fitregression(auth_key, collection, input_data, label_column_name, overwrite, test_size, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  if (test_size === null) {\n    test_size = 0.1;\n  }\n\n  if (overwrite === null) {\n    overwrite = false;\n  }\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseFloat(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"DELETE\",\n    headers: myHeaders,\n  };\n\n  var ans = [];\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var setup_params = {};\n\n  setup_params[\"db_type\"] = \"Supervised\";\n  setup_params[\"label\"] = {\n    task: \"regression\",\n    label_name: label_column_name,\n  };\n  setup_params[\"split\"] = {\n    test_size: test_size,\n  };\n  setup_params[\"cat_process \"] = {\n    embedding_dim: 64,\n  };\n  setup_params[\"hyperparams\"] = {\n    min_epochs: 500,\n    learning_rate: 0.0003,\n    decoder_layer: \"2L_BN\",\n    dropout_rate: 0,\n  };\n\n  let setup_params_JSON = JSON.stringify(setup_params);\n\n  requestOptions[\"body\"] = setup_params_JSON;\n\n  // eslint-disable-next-line no-undef\n  await fetch(\n    \"https://mycelia.azure-api.net/setup/\" + collection + \"?overwrite=\" + overwrite.toString(),\n    requestOptions\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  return \"SETUP OK\";\n}\n\n/**\n * J Table Setup - Supervised Forecast\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection JAI Collection Name\n * @param {string[][]} input_data Table data - including the label\n * @param {string} label_column_name Label (y) column name\n * @param {string} date_column_name Date column name\n * @param {boolean} [overwrite] Whether to overwrite if a collection with the same name already exists. Default: False\n * @param {number} [test_size] % of the data to use for validation and evaluation (test) - Ex: test_size=0.2 means 60% of data for training, 20% for validation, 20% for evaluation - Default: 0.1\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string} Returns the status of the model training\n */\nasync function fitforecast(\n  auth_key,\n  collection,\n  input_data,\n  label_column_name,\n  date_column,\n  overwrite,\n  test_size,\n  env\n) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  if (test_size === null) {\n    test_size = 0.1;\n  }\n\n  if (overwrite === null) {\n    overwrite = false;\n  }\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseFloat(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"DELETE\",\n    headers: myHeaders,\n  };\n\n  var ans = [];\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var setup_params = {};\n\n  setup_params[\"db_type\"] = \"Supervised\";\n  setup_params[\"label\"] = {\n    task: \"regression\",\n    label_name: label_column_name,\n    regression_scaler: \"log1p+standard\",\n  };\n  setup_params[\"split\"] = {\n    test_size: test_size,\n    type: \"sequential\",\n    split_column: date_column,\n  };\n  setup_params[\"cat_process \"] = {\n    embedding_dim: 64,\n  };\n  setup_params[\"hyperparams\"] = {\n    min_epochs: 500,\n    learning_rate: 0.0003,\n    decoder_layer: \"2L_BN\",\n    dropout_rate: 0,\n  };\n\n  let setup_params_JSON = JSON.stringify(setup_params);\n\n  requestOptions[\"body\"] = setup_params_JSON;\n\n  // eslint-disable-next-line no-undef\n  await fetch(\n    \"https://mycelia.azure-api.net/setup/\" + collection + \"?overwrite=\" + overwrite.toString(),\n    requestOptions\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  return \"SETUP OK\";\n}\n\n/**\n * J Table Setup - Create Text Representations\n * @customfunction\n * @param {string} auth_key JAI Auth Key\n * @param {string} collection JAI Collection Name\n * @param {string[][]} input_data Text data, including an id column\n * @param {string} [nlp_model] NLP Model - any model from huggingface model hub. Default: \"sentence-transformers/all-mpnet-base-v2\"\n * @param {boolean} [overwrite] Whether to overwrite if a collection with the same name already exists. Default: False\n * @param {string} [env] Valid JAI Environment for the inserted Auth Key\n * @returns {string} Returns the status of the model training\n */\nasync function fittext(auth_key, collection, input_data, nlp_model, overwrite, env) {\n  if (env === null) {\n    env = \"default\";\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"Auth\", auth_key);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"environment\", env);\n\n  if (nlp_model === null) {\n    nlp_model = \"sentence-transformers/all-mpnet-base-v2\";\n  }\n\n  if (overwrite === null) {\n    overwrite = false;\n  }\n\n  let input_list = [];\n  // every line\n  for (let row = 0; row < input_data.length; row++) {\n    if (row > 0) {\n      // every column\n      var obj = {};\n      for (let col = 0; col < input_data[0].length; col++) {\n        console.log(input_data[row][col]);\n        let value = tryParseFloat(input_data[row][col], input_data[row][col]);\n        obj[input_data[0][col]] = value;\n      }\n      input_list.push(obj);\n    }\n  }\n  console.log(input_list);\n  var myJSON = JSON.stringify(input_list);\n  var myMongoJSON = {};\n\n  myMongoJSON[\"dataSource\"] = \"jozzacluster\";\n  myMongoJSON[\"database\"] = \"jai\";\n  myMongoJSON[\"collection\"] = collection;\n  myMongoJSON[\"documents\"] = myJSON;\n\n  console.log(myJSON);\n\n  var requestOptions = {\n    method: \"DELETE\",\n    headers: myHeaders,\n  };\n\n  var ans = [];\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: myJSON,\n  };\n\n  // eslint-disable-next-line no-undef\n  await fetch(\"https://mycelia.azure-api.net/data/\" + collection, requestOptions)\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  var setup_params = {};\n\n  setup_params[\"db_type\"] = \"Text\";\n\n  setup_params[\"hyperparams\"] = {\n    nlp_model: nlp_model,\n  };\n\n  let setup_params_JSON = JSON.stringify(setup_params);\n\n  requestOptions[\"body\"] = setup_params_JSON;\n\n  // eslint-disable-next-line no-undef\n  await fetch(\n    \"https://mycelia.azure-api.net/setup/\" + collection + \"?overwrite=\" + overwrite.toString(),\n    requestOptions\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((response) => {\n      console.log(response);\n      ans.push(response);\n    })\n    .catch((error) => console.log(\"error\", error));\n\n  return \"SETUP OK\";\n}\n\nCustomFunctions.associate(\"SIMILAR\", similar);\nCustomFunctions.associate(\"SIMILARDATA\", similardata);\nCustomFunctions.associate(\"RECOMMEND\", recommend);\nCustomFunctions.associate(\"PREDICT\", predict);\nCustomFunctions.associate(\"FIELDS\", fields);\nCustomFunctions.associate(\"IDS\", ids);\nCustomFunctions.associate(\"INFO\", info);\nCustomFunctions.associate(\"STATUS\", status);\nCustomFunctions.associate(\"FITTABLE\", fittable);\nCustomFunctions.associate(\"FITCLASSIFICATION\", fitclassification);\nCustomFunctions.associate(\"FITREGRESSION\", fitregression);\nCustomFunctions.associate(\"FITFORECAST\", fitforecast);\nCustomFunctions.associate(\"FITTEXT\", fittext);"],"names":["listObjToMultiDim","list","elementsToRetrieve","include_headers","matrix","console","log","length","firstUnroll","new_headers","row","row_values","col","Array","isArray","push","toString","Object","entries","key","value","concat","filter","item","unshift","listToMatrix","elementsPerSubArray","i","k","tryParseInt","str","defaultValue","parseInt","tryParseFloat","parseFloat","auth_key","collection","id_input","top_k","env","id_input_query","flat","myHeaders","Headers","append","myJSON","JSON","stringify","requestOptions","method","headers","body","id_similars","fetch","then","response","json","forEach","query","qres","catch","error","result","input_data","input_list","obj","predict_proba","include_response_id","pred_response","results_columns","fields","keys","index","fields_t","map","_","colIndex","ids","ids_t","info","result_ex","status","result_task","result_description","result_current_step","result_total_steps","ans","setup_params","min_epochs","pretraining_ratio","learning_rate","hidden_latent_dim","setup_params_JSON","label_column_name","overwrite","stratified","test_size","split_type","task","label_name","type","split_column","embedding_dim","decoder_layer","dropout_rate","date_column","regression_scaler","nlp_model","myMongoJSON","CustomFunctions","associate","similar","similardata","recommend","predict","fittable","fitclassification","fitregression","fitforecast","fittext"],"sourceRoot":""}